from aiogram import F, Router, types, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command, Filter, CommandObject
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
import sqlite3
from aiogram.types import (ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton,   InlineKeyboardMarkup, InputMediaPhoto, Message)
from app.defs import * 


class SupportState(StatesGroup):
    waiting_for_message = State()
    wait_answer = State()


import app.keyboards as kb

# —Ä–æ—É—Ç–µ—Ä, –¥–ª—è –∑–∞–º–µ–Ω—ã dp
router = Router()
bot = Bot(token='7590317034:AAFmD3C2fLxlyq9WeMUgKd6Vuy7F3YHSoJw')

conn = sqlite3.connect('struct.db')
cursor = conn.cursor()
ADMINss_ID='7454057015'



@router.message(Command("start"))
async def cmd_start(message: types.Message, command: CommandObject, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username
    await state.clear() 
    if firstconnect(user_id) == False: 
        vidacha_dannih_firststart(user_id) 
        await bot.send_message(ADMINss_ID, f'–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\nID: {user_id}\n@{username}')
        await message.answer(f"ProfitY ‚Äî –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –≤—ã–±–æ—Ä–µ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –≤—É–∑–∞\n\n–†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–µ–±—è! –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è! –í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –∏–ª–∏ –ø—Ä–æ–π–¥–∏ –Ω–µ–±–æ–ª—å—à–æ–π —Ç–µ—Å—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤!",
            reply_markup=kb.start_bot)
    else:
        Napravlenie, opisanie, code_for = start_help(user_id)
        await message.answer(f'–í–∞—à–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:\n{Napravlenie}\n\n–ù–∞–π–¥–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫—É—Ä—Å—ã –Ω–∞ –ø–æ—Ä—Ç–∞–ª–µ –∏ —Ä–µ—à–∏ –∫—É–¥–∞ –ø–æ—Å—Ç—É–ø–∞—Ç—å!',reply_markup=kb.main_menu)


@router.callback_query(lambda c: c.data.startswith('main:'))
async def tsh(callback: types.CallbackQuery):
    unique = callback.data.split(":")[1]
    user_id = callback.from_user.id
    username =callback.from_user.username
    if unique !='':
        NewNapr(user_id, unique)
    if firstconnect(user_id) == False: 
        vidacha_dannih_firststart(user_id) 
        await bot.send_message(ADMINss_ID, f'–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\nID: {user_id}\n@{username}')
        await callback.message.edit_text(f"ProfitY ‚Äî –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –≤—ã–±–æ—Ä–µ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –≤—É–∑–∞\n\n–†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–µ–±—è! –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è! –í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –∏–ª–∏ –ø—Ä–æ–π–¥–∏ –Ω–µ–±–æ–ª—å—à–æ–π —Ç–µ—Å—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤!",
                                         reply_markup=kb.start_bot)
    else:
        Napravlenie, opisanie, code_for = start_help(user_id)
        await callback.message.edit_text(f'–í–∞—à–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:\n{Napravlenie}\n\n–ù–∞–π–¥–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫—É—Ä—Å—ã –Ω–∞ –ø–æ—Ä—Ç–∞–ª–µ –∏ —Ä–µ—à–∏ –∫—É–¥–∞ –ø–æ—Å—Ç—É–ø–∞—Ç—å!',reply_markup=kb.main_menu)


@router.callback_query(F.data=='Podrobnee')
async def tsh(callback: CallbackQuery):
    user_id = callback.from_user.id
    clr_fltr(user_id)
    Napravlenie, opisanie, code_for = start_help(user_id)
    podrob = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='–£—á. –∑–∞–≤–µ–¥–µ–Ω–∏—è –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—éüè´', callback_data=f'UchebZaved:{code_for}:1')],
    [InlineKeyboardButton(text='–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∫—É—Ä—Å—ãüìö', url = 'https://dopobr.petersburgedu.ru')],
    [InlineKeyboardButton(text='–ù–∞–∑–∞–¥üìå', callback_data='main:')]
])
    await callback.message.edit_text(f'{opisanie}',reply_markup=podrob)


@router.callback_query(F.data=='znayu')
async def tsh(callback: types.CallbackQuery):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —É–∫–ª–æ–Ω –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è",reply_markup=kb.vibor_first_napr)



@router.callback_query(lambda c: c.data.startswith("vibor:"))
async def tsh(callback: types.CallbackQuery, state: FSMContext):
    unique = callback.data.split(":")[1]
    user_id = callback.from_user.id
    username =callback.from_user.username
    keyboard, ykl = KB(unique,"FVIBOR","znayu")
    await callback.message.edit_text(f'–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å {ykl}',reply_markup=keyboard)


@router.callback_query(lambda c: c.data.startswith("FVIBOR:"))
async def tsh(callback: types.CallbackQuery, state: FSMContext):
    unique = callback.data.split(":")[1]
    user_id = callback.from_user.id
    username =callback.from_user.username
    Napravlenie, opisanie, code = about_napr(unique)
    kbr = viborat_nazad_test(code)
    await callback.message.edit_text(f'{opisanie}',reply_markup=kbr)




@router.callback_query(F.data=='obzor_vyzov')
async def tsh(callback: CallbackQuery):
    user_id = callback.from_user.id
    username = callback.from_user.username
    clr_fltr(user_id)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —É–∫–ª–æ–Ω –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è",reply_markup=kb.first_napr_vyz)


@router.callback_query(lambda c: c.data.startswith("VyzS:"))
async def tsh(callback: types.CallbackQuery, state: FSMContext):
    unique = callback.data.split(":")[1]
    user_id = callback.from_user.id
    username =callback.from_user.username
    keyboard, ykl = KB(unique,"VyzW","obzor_vyzov")
    await callback.message.edit_text(f"–ü–æ–¥–±–æ—Ä–∫–∞ –≤—É–∑–æ–≤ —Å {ykl}",reply_markup=keyboard)


@router.callback_query(lambda c: c.data.startswith("VyzW:"))
async def tsh(callback: types.CallbackQuery, state: FSMContext):
    unique = callback.data.split(":")[1]
    stranic = int(callback.data.split(":")[2])
    user_id = callback.from_user.id
    username =callback.from_user.username
    kbr , name = vyzkb(user_id, unique,stranic,'Vyz')
    await callback.message.edit_text(f"–ü–æ–¥–±–æ—Ä–∫–∞ –≤—É–∑–æ–≤ –ø–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ - {name}",reply_markup=kbr)



@router.callback_query(lambda c: c.data.startswith("filtr:"))
async def tsh(callback: types.CallbackQuery, state: FSMContext):
    unique = callback.data.split(":")[1]
    zaved = callback.data.split(":")[2]
    user_id = callback.from_user.id
    username =callback.from_user.username
    addgorodfilter(user_id,unique)

    kbr = filtrkb(user_id,zaved)
    try:
        await callback.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞",reply_markup=kbr)
    except:
        await callback.answer('–ú–∞–∫—Å–∏–º—É–º —Ñ–∞–ª—å—Ç—Ä–æ–≤')
        await callback.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞\n(2 –≥–æ—Ä–æ–¥–∞ –º–∞–∫—Å.)",reply_markup=kbr)


@router.callback_query(lambda c: c.data.startswith("Vyz:"))
async def tsh(callback: types.CallbackQuery, state: FSMContext):
    unique = callback.data.split(":")[1]
    user_id = callback.from_user.id
    username =callback.from_user.username
    gorod, polnoe, prbb, prbp, site = infovyz(unique,'vyz')
    kbr = KeyBVyz(site,unique,"Vyz")
    await callback.message.edit_text(f"{polnoe}\n–ì–æ—Ä–æ–¥ - {gorod}\n–ü—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª –±—é–¥–∂–µ—Ç - {prbb}\n–ü—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª –ø–ª–∞—Ç–Ω–æ–µ - {prbp}",reply_markup=kbr)


@router.callback_query(lambda c: c.data.startswith("prohodnoy:"))
async def tsh(callback: types.CallbackQuery, state: FSMContext):
    unique = callback.data.split(":")[1]
    zaved = callback.data.split(":")[2]
    user_id = callback.from_user.id
    KeyBoard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='–ù–∞–∑–∞–¥üìå', callback_data=f'Vyz:{unique}')]
])
    await callback.message.edit_text('–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –ï–ì–≠ –≤ –≤—É–∑–µ\n\n\n–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –ï–ì–≠ –≤ –≤—É–∑–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –¥–ª—è –≤—Å–µ–≥–æ –≤—É–∑–∞ –∏ —è–≤–ª—è–µ—Ç—Å—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π.\n\n–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –ï–ì–≠ –≤—É–∑–∞ ‚Äî —ç—Ç–æ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –æ–¥–Ω–æ–≥–æ –ï–ì–≠ –∫—Ä–∞–π–Ω–µ–≥–æ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞, –ø–æ—Å—Ç—É–ø–∏–≤—à–µ–≥–æ –≤ –≤—É–∑. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –æ–Ω —Ç–∞–∫: —Å—É–º–º–∞ –±–∞–ª–ª–æ–≤ –ï–ì–≠ –ø–æ —ç–∫–∑–∞–º–µ–Ω–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∫–æ–Ω–∫—É—Ä—Å–µ –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –≤—É–∑–∞, –¥–µ–ª–µ–Ω–Ω–∞—è –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–∫–∑–∞–º–µ–Ω–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–µ–Ω —Å–¥–∞—Ç—å –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç',reply_markup=KeyBoard)



@router.callback_query(F.data=='StartTest')
async def tsh(callback: CallbackQuery):
    user_id = callback.from_user.id
    newTEST(user_id)
    await callback.message.edit_text(f"–û—Ç–≤–µ—Ç—å –Ω–∞ 15 –≤–æ–ø—Ä–æ—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–µ–µ —Ç–µ–±–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è!",reply_markup=kb.test_nach)
    

@router.callback_query(lambda c: c.data.startswith("TEST:"))
async def tsh(callback: types.CallbackQuery, state: FSMContext):
    unique = callback.data.split(":")[1]
    user_id = callback.from_user.id
    username =callback.from_user.username
    nomer_voprosa, otveti = unique.split("#")
    if nomer_voprosa !=1:
        test_otvet(user_id,otveti)
    cursor.execute('SELECT text, otvet1, otvet2, otvet3 FROM bazatest WHERE Voprosnomer = ?',(nomer_voprosa,))
    
    
    if int(nomer_voprosa) !=16:
        text, otvet1, otvet2, otvet3  = cursor.fetchone()
        kbr = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='A', callback_data=f'TEST:{int(nomer_voprosa)+1}#{otvet1}')],
        [InlineKeyboardButton(text='B', callback_data=f'TEST:{int(nomer_voprosa)+1} #{otvet2}')],
        [InlineKeyboardButton(text='C', callback_data=f'TEST:{int(nomer_voprosa)+1}#{otvet3}')],
    ])
        text= text.replace('\\n', '\n')
        await callback.message.edit_text(f"{text}",reply_markup=kbr)
    else:
        result1, result2 = help_test_2(user_id)
        code1, code2 = help_sort_test(user_id)
        konec = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f'–í—ã–±—Ä–∞—Ç—å {result1}', callback_data=f'main:{code1}')],
            [InlineKeyboardButton(text=f'–í—ã–±—Ä–∞—Ç—å {result2}', callback_data=f'main:{code2}')],
            [InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—Å—è –æ–±—Ä–∞—Ç–Ω–æ', callback_data='main:')]
    ])
        await callback.message.edit_text(f"–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ç–µ—Å—Ç, –≤–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç \n\n–ü—Ä–µ–¥–ø–æ–ª–æ–≥–∞–µ–º:\n{result1} –∏–ª–∏ {result2}",reply_markup=konec)
    
        
@router.callback_query(F.data=='obzor_napravleniy')
async def tsh(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    clr_fltr(user_id)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —É–∫–ª–æ–Ω –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è",reply_markup=kb.vibor_obzor)

        
@router.callback_query(lambda c: c.data.startswith("Oobzor:"))
async def tsh(callback: types.CallbackQuery, state: FSMContext):
    unique = callback.data.split(":")[1]
    user_id = callback.from_user.id
    username =callback.from_user.username
    keyboard, ykl = KB(unique,"Obzor_nap","obzor_napravleniy")
    await callback.message.edit_text(f'–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å {ykl}',reply_markup=keyboard)


@router.callback_query(lambda c: c.data.startswith("Obzor_nap:"))
async def tsh(callback: types.CallbackQuery, state: FSMContext):
    unique = callback.data.split(":")[1]
    user_id = callback.from_user.id
    username =callback.from_user.username
    Napravlenie, opisanie, code = about_napr(unique)
    kbr = obzorKB(code,'UchebZaved')
    await callback.message.edit_text(f'{opisanie}',reply_markup=kbr)


@router.callback_query(F.data=='Dop')
async def tsh(callback: CallbackQuery):
    await callback.message.edit_text('‚ñº–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ‚ñº',reply_markup=kb.Dop)



@router.callback_query(F.data=='Support')
async def tsh(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    username = callback.from_user.username
    await callback.message.delete()
    await state.clear()
    await callback.message.answer('–ü—Ä–∏–≤–µ—Ç—Å–≤—É–µ–º –≤ –ø–æ–¥–¥–µ—Ä–∂–∫–µ\n\n\n–ú—ã –≥–æ—Ç–æ–≤—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—É—é –ø–æ–º–æ—â—å –≤ –ø–æ–¥–±–æ—Ä–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ä–µ—à–µ–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á–µ–º –º—ã –º–æ–∂–µ–º –≤–∞–º –ø–æ–º–æ—á—å.', reply_markup=kb.mainTP)
    await callback.answer() 




@router.callback_query(F.data=='help')
async def tsh(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    username = callback.from_user.username
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏ —Ñ–∞–π–ª—ã.")
    await state.set_state(SupportState.waiting_for_message)

@router.message(SupportState.waiting_for_message)
async def receive_support_message(message: types.Message, state: FSMContext):

    tp = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='–û—Ç–≤–µ—Ç–∏—Ç—å', callback_data=f'otvet:{message.from_user.id}')], 
    [InlineKeyboardButton(text='–ó–∞–∫—Ä—ã—Ç—å', callback_data=f'main:')]
    ])


    forward_text = f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç @{message.from_user.username} (ID: {message.from_user.id}):"

    # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.text:
        await message.bot.send_message(ADMINss_ID, f"{forward_text}\n\n{message.text}",reply_markup=tp)

    # –ï—Å–ª–∏ —ç—Ç–æ —Ñ–æ—Ç–æ
    elif message.photo:
        photo = message.photo[-1].file_id  # –ë–µ—Ä–µ–º –ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ
        caption = message.caption if message.caption else "–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∏"
        await message.bot.send_photo(ADMINss_ID, photo, caption=f"{forward_text}\n\n{caption}",reply_markup=tp)

    # –ï—Å–ª–∏ —ç—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç
    elif message.document:
        document = message.document.file_id
        caption = message.caption if message.caption else "–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∏"
        await message.bot.send_document(ADMINss_ID, document, caption=f"{forward_text}\n\n{caption}",reply_markup=tp)

    # –ï—Å–ª–∏ —ç—Ç–æ –≤–∏–¥–µ–æ
    elif message.video:
        video = message.video.file_id
        caption = message.caption if message.caption else "–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∏"
        await message.bot.send_video(ADMINss_ID, video, caption=f"{forward_text}\n\n{caption}",reply_markup=tp)

    await message.answer("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.",reply_markup=kb.closeTP)
    await state.clear()


@router.callback_query(lambda c: c.data.startswith("otvet:"))
async def tsh(callback: types.CallbackQuery, state: FSMContext):
    unique = callback.data.split(":")[1]
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç:')
    await state.set_state(SupportState.wait_answer)
    await state.update_data(user_id=unique)

@router.message(SupportState.wait_answer)
async def receive_support_message(message: types.Message, state: FSMContext):
    text = message.text 
    data = await state.get_data()
    user_id = data['user_id']
    tp = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='–û—Ç–≤–µ—Ç–∏—Ç—å', callback_data=f'help')], 
    [InlineKeyboardButton(text='–ó–∞–∫—Ä—ã—Ç—å', callback_data=f'main')]
    ])
    await message.bot.send_message(user_id, f"–û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n{text}",reply_markup=tp)
    await message.answer("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.",reply_markup=kb.closeTP)
    await state.clear() 

@router.callback_query(lambda c: c.data.startswith("UchebZavedbez:"))
async def tsh(callback: types.CallbackQuery, state: FSMContext):
    unique = callback.data.split(":")[1]
    user_id = callback.from_user.id
    tp = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='–í—É–∑—ã', callback_data=f'obzor_vyzov')],
    [InlineKeyboardButton(text='–°—Å—É–∑—ã', callback_data=f'obzor_syzov')], 
    [InlineKeyboardButton(text='–ó–∞–∫—Ä—ã—Ç—å', callback_data=f'main:')]
    ])
    clr_fltr(user_id)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–±–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ:",reply_markup=tp)




@router.callback_query(lambda c: c.data.startswith("UchebZaved:"))
async def tsh(callback: types.CallbackQuery, state: FSMContext):
    unique = callback.data.split(":")[1]
    user_id = callback.from_user.id
    tp = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='–í—É–∑—ã', callback_data=f'VyzW:{unique}:1')],
    [InlineKeyboardButton(text='–°—Å—É–∑—ã', callback_data=f'SyzW:{unique}:1')], 
    [InlineKeyboardButton(text='–ó–∞–∫—Ä—ã—Ç—å', callback_data=f'main:')]
    ])
    clr_fltr(user_id)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–±–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ:",reply_markup=tp)




@router.callback_query(F.data=='obzor_syzov')
async def tsh(callback: CallbackQuery):
    user_id = callback.from_user.id
    username = callback.from_user.username
    clr_fltr(user_id)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —É–∫–ª–æ–Ω –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è",reply_markup=kb.first_napr_kol)


@router.callback_query(lambda c: c.data.startswith("SyzS:"))
async def tsh(callback: types.CallbackQuery, state: FSMContext):
    unique = callback.data.split(":")[1]
    user_id = callback.from_user.id
    username =callback.from_user.username
    keyboard, ykl = KB(unique,"SyzW","obzor_syzov")
    await callback.message.edit_text(f"–ü–æ–¥–±–æ—Ä–∫–∞ –∫–æ–ª–ª–µ–¥–∂—É–π —Å {ykl}",reply_markup=keyboard)


@router.callback_query(lambda c: c.data.startswith("SyzW:"))
async def tsh(callback: types.CallbackQuery, state: FSMContext):
    unique = callback.data.split(":")[1]
    stranic = int(callback.data.split(":")[2])
    user_id = callback.from_user.id
    username =callback.from_user.username
    kbr , name = vyzkb(user_id, unique,stranic,'Syz')
    await callback.message.edit_text(f"–ü–æ–¥–±–æ—Ä–∫–∞ –∫–æ–ª–ª–µ–¥–∂–µ–π –ø–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ - {name}",reply_markup=kbr)



@router.callback_query(lambda c: c.data.startswith("Syz:"))
async def tsh(callback: types.CallbackQuery, state: FSMContext):
    unique = callback.data.split(":")[1]
    user_id = callback.from_user.id
    username =callback.from_user.username
    gorod, polnoe, prbb, prbp, site = infovyz(unique,'syz')
    kbr = KeyBVyz(site,unique,'Syz')
    await callback.message.edit_text(f"{polnoe}\n–ì–æ—Ä–æ–¥ - {gorod}",reply_markup=kbr)


